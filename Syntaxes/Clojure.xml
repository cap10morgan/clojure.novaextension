<?xml version="1.0" encoding="UTF-8"?>
<syntax name="clojure">
  <meta>
    <name>Clojure</name>
    <type>structured</type>
    <preferred-file-extension>clj</preferred-file-extension>
  </meta>

  <detectors>
    <extension priority="1.0">clj,cljs,cljc,cljx,edn,boot</extension>
  </detectors>

  <comments>
    <single>
      <expression>;</expression>
    </single>
  </comments>

  <brackets>
    <pair open="{" close="}" />
    <pair open="[" close="]" />
    <pair open="(" close=")" />
  </brackets>

  <surrounding-pairs>
    <pair open="{" close="}" />
    <pair open="[" close="]" />
    <pair open="(" close=")" />
    <pair open="&quot;" close="&quot;" />
  </surrounding-pairs>

  <scopes>
    <include syntax="self" collection="comments" />
    <include syntax="self" collection="definitions" />
    <include syntax="self" collection="keywords" />
    <include syntax="self" collection="identifiers" />
    <include syntax="self" collection="values" />
    <include syntax="self" collection="syntax" />
  </scopes>

  <collections>
    <collection name="comments">
      <scope name="clojure.comment.single" spell-check="true">
        <expression>(;+)\s*(.*)$</expression>
        <capture number="1" name="clojure.punctuation.definition.begin" />
        <capture number="2" name="clojure.comment.content" />
      </scope>
    </collection>

    <collection name="definitions">
      <scope name="clojure.definition.variable">
        <symbol type="variable">
          <context behavior="start" />
        </symbol>
        <expression>(?&lt;!&apos;)(\()(def)\s+([A-Za-zÀ-ÖØ-öø-ÿ*+!\-_&apos;?&lt;&gt;=][A-Za-zÀ-ÖØ-öø-ÿ0-9*+!\-_&apos;?&lt;&gt;=]*)</expression>
        <capture number="1" name="clojure.bracket" />
        <capture number="2" name="clojure.keyword" />
        <capture number="3" name="clojure.identifier.variable.name" />
        <subscopes>
          <include syntax="self" collection="comments" />
          <include syntax="self" collection="keywords" />
          <include syntax="self" collection="values" />
          <include syntax="self" collection="syntax" />
        </subscopes>
      </scope>

      <scope name="clojure.definition.function">
        <symbol type="function">
          <context behavior="start" group="function" />
        </symbol>
        <starts-with>
          <expression>(?&lt;!&apos;)(\()(defn)\s+([A-Za-zÀ-ÖØ-öø-ÿ*+!\-_&apos;?&lt;&gt;=][A-Za-zÀ-ÖØ-öø-ÿ0-9*+!\-_&apos;?&lt;&gt;=]*)</expression>
          <capture number="1" name="clojure.bracket" />
          <capture number="2" name="clojure.keyword" />
          <capture number="3" name="clojure.identifier.function.name" />
        </starts-with>
        <ends-with>
          <expression>(?=\[)</expression>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="comments" />
          <include syntax="self" collection="keywords" />
          <include syntax="self" collection="values" />
          <include syntax="self" collection="syntax" />
        </subscopes>
      </scope>

      <scope name="clojure.definition.function.private">
        <symbol type="function" scope="local">
          <context behavior="start" group="function" />
        </symbol>
        <starts-with>
          <expression>(?&lt;!&apos;)(\()(defn\-)\s+([A-Za-zÀ-ÖØ-öø-ÿ*+!\-_&apos;?&lt;&gt;=][A-Za-zÀ-ÖØ-öø-ÿ0-9*+!\-_&apos;?&lt;&gt;=]*)</expression>
          <capture number="1" name="clojure.bracket" />
          <capture number="2" name="clojure.keyword" />
          <capture number="3" name="clojure.identifier.function.name" />
        </starts-with>
        <ends-with>
          <expression>(?=\[)</expression>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="comments" />
          <include syntax="self" collection="keywords" />
          <include syntax="self" collection="values" />
          <include syntax="self" collection="syntax" />
        </subscopes>
      </scope>

      <scope name="clojure.definition.function.anonymous">
        <symbol type="function" anonymous="true">
          <context behavior="start" group="function" />
        </symbol>
        <starts-with>
          <expression>(?&lt;!&apos;)(\()(fn)\s+</expression>
          <capture number="1" name="clojure.bracket" />
          <capture number="2" name="clojure.keyword" />
        </starts-with>
        <ends-with>
          <expression>(?=\[)</expression>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="comments" />
          <include syntax="self" collection="keywords" />
          <include syntax="self" collection="values" />
          <include syntax="self" collection="syntax" />
        </subscopes>
      </scope>

      <scope name="clojure.definition.function.literal">
        <symbol type="function" scope="local" anonymous="true">
          <context behavior="start" foldable="false" />
        </symbol>
        <expression>\#\(</expression>
        <subscopes>
          <include syntax="self" collection="strings" />
          <scope name="clojure.arguments.function-literals">
            <symbol type="argument" scope="local">
              <context behavior="subtree" />
            </symbol>
            <expression>%[\d&amp;]?</expression>
          </scope>
        </subscopes>
      </scope>
    </collection>

    <collection name="keywords">
      <scope name="clojure.keyword">
        <symbol type="keyword" />
        <strings>
          <!-- Going to be tough to get everything in here and keep it
          up to date. And yeah, yeah Clojure "doesn't have reserved
          words" but it's still helpful to highlight clojure.core, etc. symbols
          vs. local or library code. Should consider generating these from
          something like
          https://github.com/jafingerhut/clojure-cheatsheets/blob/master/src/clj-jvm/src/generator/core.clj -->

          <!-- For now this is just most of the basic lowercase symbols from
          https://clojure.github.io/clojure/clojure.core-api.html -->

          <string>accessor</string>
          <string>aclone</string>
          <string>add-classpath</string>
          <string>add-tap</string>
          <string>add-watch</string>
          <string>agent</string>
          <string>agent-error</string>
          <string>agent-errors</string>
          <string>aget</string>
          <string>alength</string>
          <string>alias</string>
          <string>all-ns</string>
          <string>alter</string>
          <string>alter-meta!</string>
          <string>alter-var-root</string>
          <string>amap</string>
          <string>ancestors</string>
          <string>and</string>
          <string>any?</string>
          <string>apply</string>
          <string>areduce</string>
          <string>array-map</string>
          <string>as-></string>
          <string>aset</string>
          <string>aset-boolean</string>
          <string>aset-byte</string>
          <string>aset-char</string>
          <string>aset-double</string>
          <string>aset-float</string>
          <string>aset-int</string>
          <string>aset-long</string>
          <string>aset-short</string>
          <string>assert</string>
          <string>assoc</string>
          <string>assoc!</string>
          <string>assoc-in</string>
          <string>associative?</string>
          <string>atom</string>
          <string>await</string>
          <string>await-for</string>
          <string>bases</string>
          <string>bean</string>
          <string>bigdec</string>
          <string>bigint</string>
          <string>biginteger</string>
          <string>binding</string>
          <string>bit-and</string>
          <string>bit-and-not</string>
          <string>bit-clear</string>
          <string>bit-flip</string>
          <string>bit-not</string>
          <string>bit-or</string>
          <string>bit-set</string>
          <string>bit-shift-left</string>
          <string>bit-shift-right</string>
          <string>bit-test</string>
          <string>bit-xor</string>
          <string>boolean</string>
          <string>boolean-array</string>
          <string>boolean?</string>
          <string>booleans</string>
          <string>bound-fn</string>
          <string>bound-fn*</string>
          <string>bound?</string>
          <string>bounded-count</string>
          <string>butlast</string>
          <string>byte</string>
          <string>byte-array</string>
          <string>bytes</string>
          <string>bytes?</string>
          <string>case</string>
          <string>cast</string>
          <string>cat</string>
          <string>catch</string>
          <string>char</string>
          <string>char-array</string>
          <string>char-escape-string</string>
          <string>char-name-string</string>
          <string>char?</string>
          <string>chars</string>
          <string>class</string>
          <string>class?</string>
          <string>clear-agent-errors</string>
          <string>clojure-version</string>
          <string>coll?</string>
          <string>comment</string>
          <string>commute</string>
          <string>comp</string>
          <string>comparator</string>
          <string>compare</string>
          <string>compare-and-set!</string>
          <string>compile</string>
          <string>complement</string>
          <string>completing</string>
          <string>concat</string>
          <string>cond</string>
          <string>cond-></string>
          <string>cond->></string>
          <string>condp</string>
          <string>conj</string>
          <string>conj!</string>
          <string>cons</string>
          <string>constantly</string>
          <string>construct-proxy</string>
          <string>contains?</string>
          <string>count</string>
          <string>counted?</string>
          <string>create-ns</string>
          <string>create-struct</string>
          <string>cycle</string>
          <string>dec</string>
          <string>dec'</string>
          <string>decimal?</string>
          <string>declare</string>
          <string>dedupe</string>
          <string>def</string>
          <string>default-data-readers</string>
          <string>definline</string>
          <string>definterface</string>
          <string>defmacro</string>
          <string>defmethod</string>
          <string>defmulti</string>
          <string>defn</string>
          <string>defn-</string>
          <string>defonce</string>
          <string>defprotocol</string>
          <string>defrecord</string>
          <string>defstruct</string>
          <string>deftype</string>
          <string>delay</string>
          <string>delay?</string>
          <string>deliver</string>
          <string>denominator</string>
          <string>deref</string>
          <string>derive</string>
          <string>descendants</string>
          <string>disj</string>
          <string>disj!</string>
          <string>dissoc</string>
          <string>dissoc!</string>
          <string>distinct</string>
          <string>distinct?</string>
          <string>do</string>
          <string>doall</string>
          <string>dorun</string>
          <string>doseq</string>
          <string>dosync</string>
          <string>dotimes</string>
          <string>doto</string>
          <string>double</string>
          <string>double-array</string>
          <string>double?</string>
          <string>doubles</string>
          <string>drop</string>
          <string>drop-last</string>
          <string>drop-while</string>
          <string>eduction</string>
          <string>empty</string>
          <string>empty?</string>
          <string>ensure</string>
          <string>ensure-reduced</string>
          <string>enumeration-seq</string>
          <string>error-handler</string>
          <string>error-mode</string>
          <string>eval</string>
          <string>even?</string>
          <string>every-pred</string>
          <string>every?</string>
          <string>ex-cause</string>
          <string>ex-data</string>
          <string>ex-info</string>
          <string>ex-message</string>
          <string>extend</string>
          <string>extend-protocol</string>
          <string>extend-type</string>
          <string>extenders</string>
          <string>extends?</string>
          <string>false?</string>
          <string>ffirst</string>
          <string>file-seq</string>
          <string>filter</string>
          <string>filterv</string>
          <string>finally</string>
          <string>find</string>
          <string>find-keyword</string>
          <string>find-ns</string>
          <string>find-var</string>
          <string>first</string>
          <string>flatten</string>
          <string>float</string>
          <string>float-array</string>
          <string>float?</string>
          <string>floats</string>
          <string>flush</string>
          <string>fn</string>
          <string>fn?</string>
          <string>fnext</string>
          <string>fnil</string>
          <string>for</string>
          <string>force</string>
          <string>format</string>
          <string>frequencies</string>
          <string>future</string>
          <string>future-call</string>
          <string>future-cancel</string>
          <string>future-cancelled?</string>
          <string>future-done?</string>
          <string>future?</string>
          <string>gen-class</string>
          <string>gen-interface</string>
          <string>gensym</string>
          <string>get</string>
          <string>get-in</string>
          <string>get-method</string>
          <string>get-proxy-class</string>
          <string>get-thread-bindings</string>
          <string>get-validator</string>
          <string>group-by</string>
          <string>halt-when</string>
          <string>hash</string>
          <string>hash-map</string>
          <string>hash-ordered-coll</string>
          <string>hash-set</string>
          <string>hash-unordered-coll</string>
          <string>ident?</string>
          <string>identical?</string>
          <string>identity</string>
          <string>if</string>
          <string>if-let</string>
          <string>if-not</string>
          <string>if-some</string>
          <string>ifn?</string>
          <string>import</string>
          <string>in-ns</string>
          <string>inc</string>
          <string>inc'</string>
          <string>indexed?</string>
          <string>init-proxy</string>
          <string>inst-ms</string>
          <string>inst?</string>
          <string>instance?</string>
          <string>int</string>
          <string>int-array</string>
          <string>int?</string>
          <string>integer?</string>
          <string>interleave</string>
          <string>intern</string>
          <string>interpose</string>
          <string>into</string>
          <string>into-array</string>
          <string>ints</string>
          <string>io!</string>
          <string>isa?</string>
          <string>iterate</string>
          <string>iterator-seq</string>
          <string>juxt</string>
          <string>keep</string>
          <string>keep-indexed</string>
          <string>key</string>
          <string>keys</string>
          <string>keyword</string>
          <string>keyword?</string>
          <string>last</string>
          <string>lazy-cat</string>
          <string>lazy-seq</string>
          <string>let</string>
          <string>letfn</string>
          <string>line-seq</string>
          <string>list</string>
          <string>list*</string>
          <string>list?</string>
          <string>load</string>
          <string>load-file</string>
          <string>load-reader</string>
          <string>load-string</string>
          <string>loaded-libs</string>
          <string>locking</string>
          <string>long</string>
          <string>long-array</string>
          <string>longs</string>
          <string>loop</string>
          <string>macroexpand</string>
          <string>macroexpand-1</string>
          <string>make-array</string>
          <string>make-hierarchy</string>
          <string>map</string>
          <string>map-entry?</string>
          <string>map-indexed</string>
          <string>map?</string>
          <string>mapcat</string>
          <string>mapv</string>
          <string>max</string>
          <string>max-key</string>
          <string>memfn</string>
          <string>memoize</string>
          <string>merge</string>
          <string>merge-with</string>
          <string>meta</string>
          <string>methods</string>
          <string>min</string>
          <string>min-key</string>
          <string>mix-collection-hash</string>
          <string>mod</string>
          <string>monitor-enter</string>
          <string>monitor-exit</string>
          <string>name</string>
          <string>namespace</string>
          <string>namespace-munge</string>
          <string>nat-int?</string>
          <string>neg-int?</string>
          <string>neg?</string>
          <string>new</string>
          <string>newline</string>
          <string>next</string>
          <string>nfirst</string>
          <string>nil?</string>
          <string>nnext</string>
          <string>not</string>
          <string>not-any?</string>
          <string>not-empty</string>
          <string>not-every?</string>
          <string>not=</string>
          <string>ns</string>
          <string>ns-aliases</string>
          <string>ns-imports</string>
          <string>ns-interns</string>
          <string>ns-map</string>
          <string>ns-name</string>
          <string>ns-publics</string>
          <string>ns-refers</string>
          <string>ns-resolve</string>
          <string>ns-unalias</string>
          <string>ns-unmap</string>
          <string>nth</string>
          <string>nthnext</string>
          <string>nthrest</string>
          <string>num</string>
          <string>number?</string>
          <string>numerator</string>
          <string>object-array</string>
          <string>odd?</string>
          <string>or</string>
          <string>parents</string>
          <string>partial</string>
          <string>partition</string>
          <string>partition-all</string>
          <string>partition-by</string>
          <string>pcalls</string>
          <string>peek</string>
          <string>persistent!</string>
          <string>pmap</string>
          <string>pop</string>
          <string>pop!</string>
          <string>pop-thread-bindings</string>
          <string>pos-int?</string>
          <string>pos?</string>
          <string>pr</string>
          <string>pr-str</string>
          <string>prefer-method</string>
          <string>prefers</string>
          <string>print</string>
          <string>print-str</string>
          <string>printf</string>
          <string>println</string>
          <string>println-str</string>
          <string>prn</string>
          <string>prn-str</string>
          <string>promise</string>
          <string>proxy</string>
          <string>proxy-mappings</string>
          <string>proxy-super</string>
          <string>push-thread-bindings</string>
          <string>pvalues</string>
          <string>qualified-ident?</string>
          <string>qualified-keyword?</string>
          <string>qualified-symbol?</string>
          <string>quot</string>
          <string>quote</string>
          <string>rand</string>
          <string>rand-int</string>
          <string>rand-nth</string>
          <string>random-sample</string>
          <string>range</string>
          <string>ratio?</string>
          <string>rational?</string>
          <string>rationalize</string>
          <string>re-find</string>
          <string>re-groups</string>
          <string>re-matcher</string>
          <string>re-matches</string>
          <string>re-pattern</string>
          <string>re-seq</string>
          <string>read</string>
          <string>read+string</string>
          <string>read-line</string>
          <string>read-string</string>
          <string>reader-conditional</string>
          <string>reader-conditional?</string>
          <string>realized?</string>
          <string>record?</string>
          <string>recur</string>
          <string>reduce</string>
          <string>reduce-kv</string>
          <string>reduced</string>
          <string>reduced?</string>
          <string>reductions</string>
          <string>ref</string>
          <string>ref-history-count</string>
          <string>ref-max-history</string>
          <string>ref-min-history</string>
          <string>ref-set</string>
          <string>refer</string>
          <string>refer-clojure</string>
          <string>reify</string>
          <string>release-pending-sends</string>
          <string>rem</string>
          <string>remove</string>
          <string>remove-all-methods</string>
          <string>remove-method</string>
          <string>remove-ns</string>
          <string>remove-tap</string>
          <string>remove-watch</string>
          <string>repeat</string>
          <string>repeatedly</string>
          <string>replace</string>
          <string>replicate</string>
          <string>require</string>
          <string>requiring-resolve</string>
          <string>reset!</string>
          <string>reset-meta!</string>
          <string>reset-vals!</string>
          <string>resolve</string>
          <string>rest</string>
          <string>restart-agent</string>
          <string>resultset-seq</string>
          <string>reverse</string>
          <string>reversible?</string>
          <string>rseq</string>
          <string>rsubseq</string>
          <string>run!</string>
          <string>satisfies?</string>
          <string>second</string>
          <string>select-keys</string>
          <string>send</string>
          <string>send-off</string>
          <string>send-via</string>
          <string>seq</string>
          <string>seq?</string>
          <string>seqable?</string>
          <string>seque</string>
          <string>sequence</string>
          <string>sequential?</string>
          <string>set</string>
          <string>set!</string>
          <string>set-agent-send-executor!</string>
          <string>set-agent-send-off-executor!</string>
          <string>set-error-handler!</string>
          <string>set-error-mode!</string>
          <string>set-validator!</string>
          <string>set?</string>
          <string>short</string>
          <string>short-array</string>
          <string>shorts</string>
          <string>shuffle</string>
          <string>shutdown-agents</string>
          <string>simple-ident?</string>
          <string>simple-keyword?</string>
          <string>simple-symbol?</string>
          <string>slurp</string>
          <string>some</string>
          <string>some-></string>
          <string>some->></string>
          <string>some-fn</string>
          <string>some?</string>
          <string>sort</string>
          <string>sort-by</string>
          <string>sorted-map</string>
          <string>sorted-map-by</string>
          <string>sorted-set</string>
          <string>sorted-set-by</string>
          <string>sorted?</string>
          <string>special-symbol?</string>
          <string>spit</string>
          <string>split-at</string>
          <string>split-with</string>
          <string>str</string>
          <string>string?</string>
          <string>struct</string>
          <string>struct-map</string>
          <string>subs</string>
          <string>subseq</string>
          <string>subvec</string>
          <string>supers</string>
          <string>swap!</string>
          <string>swap-vals!</string>
          <string>symbol</string>
          <string>symbol?</string>
          <string>sync</string>
          <string>tagged-literal</string>
          <string>tagged-literal?</string>
          <string>take</string>
          <string>take-last</string>
          <string>take-nth</string>
          <string>take-while</string>
          <string>tap></string>
          <string>test</string>
          <string>the-ns</string>
          <string>thread-bound?</string>
          <string>throw</string>
          <string>time</string>
          <string>to-array</string>
          <string>to-array-2d</string>
          <string>trampoline</string>
          <string>transduce</string>
          <string>transient</string>
          <string>tree-seq</string>
          <string>true?</string>
          <string>try</string>
          <string>type</string>
          <string>unchecked-add</string>
          <string>unchecked-add-int</string>
          <string>unchecked-byte</string>
          <string>unchecked-char</string>
          <string>unchecked-dec</string>
          <string>unchecked-dec-int</string>
          <string>unchecked-divide-int</string>
          <string>unchecked-double</string>
          <string>unchecked-float</string>
          <string>unchecked-inc</string>
          <string>unchecked-inc-int</string>
          <string>unchecked-int</string>
          <string>unchecked-long</string>
          <string>unchecked-multiply</string>
          <string>unchecked-multiply-int</string>
          <string>unchecked-negate</string>
          <string>unchecked-negate-int</string>
          <string>unchecked-remainder-int</string>
          <string>unchecked-short</string>
          <string>unchecked-subtract</string>
          <string>unchecked-subtract-int</string>
          <string>underive</string>
          <string>unreduced</string>
          <string>unsigned-bit-shift-right</string>
          <string>update</string>
          <string>update-in</string>
          <string>update-proxy</string>
          <string>uri?</string>
          <string>use</string>
          <string>uuid?</string>
          <string>val</string>
          <string>vals</string>
          <string>var</string>
          <string>var-get</string>
          <string>var-set</string>
          <string>var?</string>
          <string>vary-meta</string>
          <string>vec</string>
          <string>vector</string>
          <string>vector-of</string>
          <string>vector?</string>
          <string>volatile!</string>
          <string>volatile?</string>
          <string>vreset!</string>
          <string>vswap!</string>
          <string>when</string>
          <string>when-first</string>
          <string>when-let</string>
          <string>when-not</string>
          <string>when-some</string>
          <string>while</string>
          <string>with-bindings</string>
          <string>with-bindings*</string>
          <string>with-in-str</string>
          <string>with-local-vars</string>
          <string>with-meta</string>
          <string>with-open</string>
          <string>with-out-str</string>
          <string>with-precision</string>
          <string>with-redefs</string>
          <string>with-redefs-fn</string>
          <string>xml-seq</string>
          <string>zero?</string>
          <string>zipmap</string>
        </strings>
      </scope>
    </collection>

    <collection name="values">
      <include syntax="self" collection="strings" />

      <scope name="clojure.value.null">
        <strings><string>nil</string></strings>
      </scope>

      <scope name="clojure.value.boolean">
        <strings>
          <string>true</string>
          <string>false</string>
        </strings>
      </scope>

      <scope name="clojure.value.number.hex">
        <expression>\b0x[a-fA-F0-9]+\b</expression>
      </scope>
      <scope name="clojure.value.number.oct">
        <expression>\b0[0-7]+\b</expression>
      </scope>
      <scope name="clojure.value.number.ratio">
        <expression>\b\d+/[1-9]+\b</expression>
      </scope>
      <scope name="clojure.value.number">
        <expression>\b\-?(?:[2-36]r)?(?:\d+(?:\.\d)?|(?:\.\d+))[NM]?\b</expression>
      </scope>

      <scope name="clojure.value.character">
        <expression>\\(?:o[0-7]+|u\d+|newline|space|tab|formfeed|backspace|.)</expression>
      </scope>

      <scope name="clojure.value.symbolic">
        <expression>\#{2}(?:\-?Inf|NaN|)</expression>
      </scope>

      <scope name="clojure.value.keyword">
        <expression>::?(?:[A-Za-zÀ-ÖØ-öø-ÿ*+!\-_&apos;\?&lt;&gt;=][A-Za-zÀ-ÖØ-öø-ÿ0-9*+!\-_&apos;\?&lt;&gt;=\.]+/)?(?:[A-Za-zÀ-ÖØ-öø-ÿ*+!\-_&apos;\?&lt;&gt;=][A-Za-zÀ-ÖØ-öø-ÿ0-9*+!\-_&apos;\?&lt;&gt;=]+)</expression>
      </scope>
    </collection>

    <collection name="strings">
      <scope name="clojure.string.double-quoted">
        <starts-with>
          <expression>(?:\b(b|r|u))?(&quot;)</expression>
          <capture number="1" name="clojure.string.double-quoted.prefix" />
          <capture number="2" name="clojure.string.double-quoted.delimiter" />
        </starts-with>
        <ends-with>
          <expression>(?&lt;!\\)(&quot;)</expression>
          <capture number="1" name="clojure.string.double-quoted.delimiter" />
        </ends-with>
      </scope>
    </collection>

    <collection name="identifiers">
      <scope name="clojure.identifier.function">
        <expression>(?&lt;=[^&apos;]\()(?:/|(?:[A-Za-zÀ-ÖØ-öø-ÿ*+!\-_&apos;?&lt;&gt;=][A-Za-zÀ-ÖØ-öø-ÿ0-9*+!\-_&apos;?&lt;&gt;=.]*/)?[A-Za-zÀ-ÖØ-öø-ÿ*+!\-_&apos;?&lt;&gt;=][A-Za-zÀ-ÖØ-öø-ÿ0-9*+!\-_&apos;?&lt;&gt;=.]*)</expression>
      </scope>
      <scope name="clojure.identifier.variable">
        <expression>[A-Za-zÀ-ÖØ-öø-ÿ*+!\-_'?&lt;&gt;=][A-Za-zÀ-ÖØ-öø-ÿ0-9*+!\-_'?&lt;&gt;=]*</expression>
      </scope>
    </collection>

    <collection name="syntax">
      <scope name="clojure.bracket.list.start">
        <symbol type="block">
          <context behavior="start" />
        </symbol>
        <expression>(?&lt;!&apos;)\(</expression>
        <subscopes>
          <include syntax="self" collection="identifiers" />
        </subscopes>
      </scope>
      <scope name="clojure.bracket.list.end">
        <symbol type="block">
          <context behavior="end" />
        </symbol>
        <expression>\)</expression>
      </scope>
      <scope name="clojure.bracket">
        <expression>[\(\{\[\)\}\]]</expression>
      </scope>
    </collection>

  </collections>

</syntax>
